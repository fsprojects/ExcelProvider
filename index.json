[{"uri":"/ExcelProvider/cells.html","title":"Accessing Cells","content":"\r\nAccessing Cells\r\nTo access a particular cell you need to access the relevant row and use the field name which is the value in the first row of the relevant column.\r\nExample\r\n\r\nThis example demonstrates referencing the first column (with name Fourth) on row 4:\r\n// reference the type provider dll\r\n#r \u0026quot;ExcelProvider.dll\u0026quot;\r\nopen FSharp.Interop.Excel\r\n\r\n// Let the type provider do it\u0026#39;s work\r\ntype MultipleSheetsSecond = ExcelFile\u0026lt;\u0026quot;MultipleSheets.xlsx\u0026quot;, \u0026quot;B\u0026quot;\u0026gt;\r\nlet file = new MultipleSheetsSecond()\r\nlet rows = file.Data |\u0026gt; Seq.toArray\r\nlet test = rows.[2].Fourth\r\n\r\nAnd the variable test has the following value:\r\nNo value returned by any evaluator\r\nCells can be accessed dynamically using the zero-based column index or case-sensitive header name:\r\nlet testByIndex = rows.[2].GetValue 0\r\nlet testByHeader = rows.[2].GetValue \u0026quot;Fourth\u0026quot;\r\n\r\nThe variables testByIndex and testByHeader have the respective values:\r\nNo value returned by any evaluator\r\nNo value returned by any evaluator\r\nAccessing cell values by index or string header sacrifices type safety; the result signature is obj.\r\n","headings":["Accessing Cells","Example"],"type":"content"},{"uri":"/ExcelProvider/getting-started.html","title":"Getting Started","content":"\r\nGetting Started\r\nTo get started simply add ExcelProvider.dll as a reference to your project.\r\nIf you are using F# scripts then just add the dll using the #r option.\r\nIf you then open FSharp.Interop.Excel you will have access to the Type Provider functionality.\r\nYou can then create a type for an individual workbook. The simplest option is to specify just the name of the workbook.\r\nYou will then be given typed access to the data held in the first sheet.\r\nThe first row of the sheet will be treated as field names and the subsequent rows will be treated as values for these fields.\r\nParameters\r\nWhen creating the type you can specify the following parameters:\r\n\r\nFileName Location of the Excel file.\r\nSheetName Name of sheet containing data. Defaults to first sheet.\r\nRange Specification using A1:D3 type addresses of one or more ranges. Defaults to use whole sheet.\r\nHasHeaders Whether the range contains the names of the columns as its first line.\r\nForceString Specifies forcing data to be processed as strings. Defaults to false.\r\n\r\nAll but the first are optional.\r\nThe parameters can be specified by position or by using the name - for example the following are equivalent:\r\nopen FSharp.Interop.Excel\r\n\r\ntype MultipleSheets1 = ExcelFile\u0026lt;\u0026quot;MultipleSheets.xlsx\u0026quot;, \u0026quot;B\u0026quot;\u0026gt;\r\ntype MultipleSheets2 = ExcelFile\u0026lt;\u0026quot;MultipleSheets.xlsx\u0026quot;, SheetName=\u0026quot;B\u0026quot;\u0026gt;\r\n\r\nExample\r\nThis example shows the use of the type provider in an F# script on a sheet containing three rows of data:\r\n\r\n// reference the type provider dll\r\nopen FSharp.Interop.Excel\r\n\r\n// Let the type provider do it\u0026#39;s work\r\ntype DataTypesTest = ExcelFile\u0026lt;\u0026quot;DataTypes.xlsx\u0026quot;\u0026gt;\r\nlet file = new DataTypesTest()\r\nlet row = file.Data |\u0026gt; Seq.head\r\nlet test = row.Float\r\n\r\nAnd the variable test has the following value:\r\n1.0\r\n","headings":["Getting Started","Parameters","Example"],"type":"content"},{"uri":"/ExcelProvider/headers.html","title":"Without Headers","content":"\r\nWithout Headers\r\nTo process a sheet which does not include headers you can use the HasHeaders parameter.\r\nThis parameter defaults to true.\r\nIf you set it to false, then all rows are treated as data.\r\nExample\r\nThis example shows the use of the type provider in an F# script on a sheet containing no headers:\r\n\r\n// reference the type provider dll\r\n#r \u0026quot;ExcelProvider.Runtime.dll\u0026quot;\r\nopen FSharp.Interop.Excel\r\n\r\n// Let the type provider do it\u0026#39;s work\r\ntype DataTypesTest = ExcelFile\u0026lt;\u0026quot;DataTypesNoHeader.xlsx\u0026quot;, HasHeaders=false\u0026gt;\r\nlet file = new DataTypesTest()\r\nlet row = file.Data |\u0026gt; Seq.head\r\nlet test = row.Column2\r\n\r\nAnd the variable test has the following value:\r\nNo value returned by any evaluator\r\n","headings":["Without Headers","Example"],"type":"content"},{"uri":"/ExcelProvider/index.html","title":"ExcelProvider\r\n","content":"ExcelProvider\r\nThis library is for the .NET platform implementing a Excel type provider.\r\n\r\n  \r\n  \r\n    \r\n      The library can be installed from NuGet:\r\n      PM\u003E Install-Package ExcelProvider\r\n    \r\n  \r\n  \r\n\r\nExample\r\nThis example demonstrates the use of the type provider:\r\n\r\n// reference the type provider dll\r\n#r \u0026quot;ExcelProvider.Runtime.dll\u0026quot;\r\nopen FSharp.Interop.Excel\r\n\r\n// Let the type provider do it\u0026#39;s work\r\ntype DataTypesTest = ExcelFile\u0026lt;\u0026quot;DataTypes.xlsx\u0026quot;\u0026gt;\r\nlet file = new DataTypesTest()\r\nlet row = file.Data |\u0026gt; Seq.head\r\n\r\nNow we have strongly typed access to the Excel rows:\r\n\r\nrow.String\r\nval it : string = \u0026quot;A\u0026quot;\r\nrow.Float\r\nval it : float = 1.0\r\nrow.Boolean\r\nval it : bool = true\r\n\r\nDocumentation\r\nFor more information see the Documentation pages:\r\n\r\nGetting Started contains an overview of the library.\r\nAccessing Sheets shows how to access different sheets in a workbook.\r\nAccessing Rows shows how to access individual rows in a worksheet.\r\nAccessing Cells shows how to access individual cells within a row of a worksheet.\r\nAccessing Ranges shows how to access multiple ranges of data within a worksheet.\r\nWithout Headers shows how to process sheets which do not include headers.\r\n\r\nContributing and copyright\r\nThe project is hosted on GitHub where you can report issues, fork\r\nthe project and submit pull requests. If you\u0027re adding new public API, please also\r\nconsider adding samples that can be turned into a documentation. You might\r\nalso want to read library design notes to understand how it works.\r\nThe library is available under Public Domain license, which allows modification and\r\nredistribution for both commercial and non-commercial purposes. For more information see the\r\nLicense file in the GitHub repository.\r\n","headings":["ExcelProvider","Example","Documentation","Contributing and copyright"],"type":"content"},{"uri":"/ExcelProvider/ranges.html","title":"Accessing Ranges","content":"\r\nAccessing Ranges\r\nTo access a range you need to specify the range (or ranges) to be used.\r\nYou can either specify this as the second parameter or the named Range parameter.\r\nExample\r\n\r\nThis example demonstrates referencing multiple ranges:\r\n// reference the type provider dll\r\n#r \u0026quot;ExcelProvider.dll\u0026quot;\r\nopen FSharp.Interop.Excel\r\n\r\n// Let the type provider do it\u0026#39;s work\r\ntype MultipleRegions = ExcelFile\u0026lt;\u0026quot;MultipleRegions.xlsx\u0026quot;, Range=\u0026quot;A1:C5,E3:G5\u0026quot;, ForceString=true\u0026gt;\r\nlet file = new MultipleRegions()\r\nlet rows = file.Data |\u0026gt; Seq.toArray\r\n\r\nlet test1 = rows.[0].First\r\nlet test2 = rows.[0].Fourth\r\n\r\nAnd the variables test1 and test2 have the following values:\r\nNo value returned by any evaluator\r\nNo value returned by any evaluator\r\n","headings":["Accessing Ranges","Example"],"type":"content"},{"uri":"/ExcelProvider/rows.html","title":"Accessing Rows","content":"\r\nAccessing Rows\r\nRows are returned as a sequence from the Data element of the ExcelFile type.\r\nExample\r\n\r\nThis example demonstrates loading the second row (with index 1) into the variable test:\r\n// reference the type provider dll\r\n#r \u0026quot;ExcelProvider.Runtime.dll\u0026quot;\r\nopen FSharp.Interop.Excel\r\n\r\n// Let the type provider do it\u0026#39;s work\r\ntype MultipleSheetsSecond = ExcelFile\u0026lt;\u0026quot;MultipleSheets.xlsx\u0026quot;, \u0026quot;B\u0026quot;\u0026gt;\r\nlet file = new MultipleSheetsSecond()\r\nlet rows = file.Data |\u0026gt; Seq.toArray\r\nlet test = rows.[1]\r\n\r\nAnd the variable test has the following value:\r\nNo value returned by any evaluator\r\n","headings":["Accessing Rows","Example"],"type":"content"},{"uri":"/ExcelProvider/sheets.html","title":"Accessing Sheets","content":"\r\nAccessing Sheets\r\nTo access a particular sheet you need to specify the sheet name as the second parameter when creating the ExcelProvider type.\r\nIf you do not include a second parameter then the first sheet in the workbook is used.\r\nExample\r\n\r\nThis example demonstrates referencing the second sheet (with name B):\r\n// reference the type provider dll\r\n#r \u0026quot;ExcelProvider.Runtime.dll\u0026quot;\r\nopen FSharp.Interop.Excel\r\n\r\n// Let the type provider do it\u0026#39;s work\r\ntype MultipleSheetsSecond = ExcelFile\u0026lt;\u0026quot;MultipleSheets.xlsx\u0026quot;, \u0026quot;B\u0026quot;\u0026gt;\r\nlet file = new MultipleSheetsSecond()\r\nlet rows = file.Data |\u0026gt; Seq.toArray\r\nlet test = rows.[0].Fourth\r\n\r\nAnd the variable test has the following value:\r\nNo value returned by any evaluator\r\n","headings":["Accessing Sheets","Example"],"type":"content"}]